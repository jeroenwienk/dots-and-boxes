{"version":3,"sources":["components/Line.js","components/Rect.js","App.js","index.js"],"names":["Line","props","id","x1","y1","x2","y2","occupiedLinesMap","onClick","config","useState","isHovered","setIsHovered","lineStyles","stroke","strokeWidth","occupied","colors","players","occupiedBy","style","strokeOpacity","cursor","undefined","onMouseEnter","onMouseLeave","VERTICAL","HORIZONTAL","Rect","x","y","width","height","tile","fill","opacity","App","state","rows","columns","offset","1","2","playerNum","tilesMatrix","init","push","row","column","count","setState","Math","random","handleLineClick","event","currentTarget","updatedTilesMap","extraTurn","getAdjacentTiles","forEach","key","newTile","getUpdatedTilesMatrix","getNextPlayerNum","this","split","orientation","parseInt","tiles","length","map","vertical","xLength","yLength","coordinates","getCoordinates","lineKey","getLineKey","lines","rowIndex","tileIndex","getLine","rectangles","xPadding","yPadding","scores","reduce","accumulator","className","fontSize","color","backgroundColor","xmlns","viewBox","renderLines","renderRectangles","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4299d75.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction Line(props) {\n  const { id, x1, y1, x2, y2, occupiedLinesMap, onClick, config } = props;\n  const [isHovered, setIsHovered] = useState(false);\n\n  const color = isHovered ? '#FAFAFA' : '#9E9E9E';\n  const lineStyles = { stroke: color, strokeWidth: 4 };\n  const occupied = occupiedLinesMap[id];\n\n  if (occupied != null) {\n    lineStyles.stroke = config.colors.players[occupied.occupiedBy];\n  }\n\n  return (\n    <>\n      <line\n        id={`display-${id}`}\n        x1={x1}\n        y1={y1}\n        x2={x2}\n        y2={y2}\n        style={lineStyles}\n      />\n      <line\n        id={id}\n        x1={x1}\n        y1={y1}\n        x2={x2}\n        y2={y2}\n        style={{\n          ...lineStyles,\n          strokeWidth: lineStyles.strokeWidth * 6,\n          strokeOpacity: 0,\n          cursor: 'pointer',\n        }}\n        onClick={!occupied ? onClick : undefined}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      />\n    </>\n  );\n}\n\nLine.VERTICAL = 'vertical';\nLine.HORIZONTAL = 'horizontal';\n\nexport default Line;\n","import React from 'react';\n\nfunction Rect(props) {\n  const { id, x, y, width, height, tile, config } = props;\n\n  const style = {\n    strokeWidth: 1,\n    stroke: '#000000',\n    fill: '#000000',\n    opacity: 0,\n  };\n\n  if (tile.occupiedBy) {\n    style.stroke = config.colors.players[tile.occupiedBy];\n    style.fill = config.colors.players[tile.occupiedBy];\n    style.opacity = 1;\n  }\n\n  return (\n    <rect id={id} width={width} height={height} x={x} y={y} style={style} />\n  );\n}\n\nexport default Rect;\n","import React from 'react';\nimport './App.css';\n\nimport Line from './components/Line';\nimport Rect from './components/Rect';\n\nclass App extends React.Component {\n  state = {\n    config: {\n      width: 800,\n      height: 800,\n      rows: 5,\n      columns: 5,\n      offset: 6,\n      colors: {\n        players: {\n          1: '#61dafb',\n          2: '#B2FF59',\n        },\n      },\n    },\n    playerNum: 1,\n    occupiedLinesMap: {},\n    tilesMatrix: [],\n  };\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init = () => {\n    const { config } = this.state;\n\n    const tilesMatrix = [];\n\n    for (let y = 0; y < config.rows; y++) {\n      tilesMatrix.push([]);\n      for (let x = 0; x < config.columns; x++) {\n        tilesMatrix[y].push({ row: y, column: x, count: 0, occupiedBy: null });\n      }\n    }\n\n    this.setState({\n      tilesMatrix,\n      occupiedLinesMap: {},\n      playerNum: Math.random() > 0.5 ? 1 : 2,\n    });\n  };\n\n  getNextPlayerNum() {\n    return this.state.playerNum === 1 ? 2 : 1;\n  }\n\n  getAdjacentTiles(tilesMatrix, id) {\n    let [orientation, row, column] = id.split('-');\n    row = parseInt(row, 10);\n    column = parseInt(column, 10);\n\n    const tiles = [];\n    if (orientation === Line.HORIZONTAL) {\n      if (row === 0) {\n        tiles.push(tilesMatrix[row][column]);\n      } else if (row === tilesMatrix.length) {\n        tiles.push(tilesMatrix[row - 1][column]);\n      } else {\n        tiles.push(tilesMatrix[row - 1][column]);\n        tiles.push(tilesMatrix[row][column]);\n      }\n    } else if (orientation === Line.VERTICAL) {\n      if (column === 0) {\n        tiles.push(tilesMatrix[row][column]);\n      } else if (column === tilesMatrix[0].length) {\n        tiles.push(tilesMatrix[row][column - 1]);\n      } else {\n        tiles.push(tilesMatrix[row][column - 1]);\n        tiles.push(tilesMatrix[row][column]);\n      }\n    }\n    return tiles;\n  }\n\n  getUpdatedTilesMatrix(tilesMatrix, updatedTilesMap) {\n    return tilesMatrix.map((row) => {\n      return row.map((tile) => {\n        const key = `${tile.row}${tile.column}`;\n        return updatedTilesMap[key] || tile;\n      });\n    });\n  }\n\n  handleLineClick = (event) => {\n    const { tilesMatrix, occupiedLinesMap, playerNum } = this.state;\n\n    const id = event.currentTarget.id;\n    const updatedTilesMap = {};\n    let extraTurn = false;\n\n    this.getAdjacentTiles(tilesMatrix, id).forEach((tile) => {\n      const key = `${tile.row}${tile.column}`;\n      const newTile = { ...tile };\n\n      if (newTile.count + 1 < 4) {\n        newTile.count++;\n      } else {\n        newTile.count++;\n        newTile.occupiedBy = playerNum;\n        extraTurn = true;\n      }\n\n      updatedTilesMap[key] = newTile;\n    });\n\n    this.setState({\n      occupiedLinesMap: {\n        ...occupiedLinesMap,\n        [id]: { occupiedBy: playerNum },\n      },\n      tilesMatrix: this.getUpdatedTilesMatrix(tilesMatrix, updatedTilesMap),\n      playerNum: extraTurn ? playerNum : this.getNextPlayerNum(),\n    });\n  };\n\n  getCoordinates(row, column, vertical) {\n    const { width, height, rows, columns, offset } = this.state.config;\n\n    const xLength = (width - 2 * offset) / columns;\n    const yLength = (height - 2 * offset) / rows;\n\n    return {\n      x1: column * xLength + offset,\n      y1: row * yLength + offset,\n      x2: (column + (vertical ? 0 : 1)) * xLength + offset,\n      y2: (row + (vertical ? 1 : 0)) * yLength + offset,\n      xLength: xLength,\n      yLength: yLength,\n    };\n  }\n\n  getLineKey(row, column, vertical) {\n    return `${vertical ? Line.VERTICAL : Line.HORIZONTAL}-${row}-${column}`;\n  }\n\n  getLine(row, column, vertical) {\n    const { occupiedLinesMap, config } = this.state;\n    const coordinates = this.getCoordinates(row, column, vertical);\n    const lineKey = this.getLineKey(row, column, vertical);\n\n    return (\n      <Line\n        id={lineKey}\n        key={lineKey}\n        x1={coordinates.x1}\n        y1={coordinates.y1}\n        x2={coordinates.x2}\n        y2={coordinates.y2}\n        occupiedLinesMap={occupiedLinesMap}\n        config={config}\n        onClick={this.handleLineClick}\n      />\n    );\n  }\n\n  renderLines() {\n    const { tilesMatrix } = this.state;\n    const lines = [];\n\n    tilesMatrix.forEach((row, rowIndex) => {\n      return row.forEach((tile, tileIndex) => {\n        lines.push(this.getLine(tile.row, tile.column, false));\n        lines.push(this.getLine(tile.row, tile.column, true));\n\n        rowIndex === tilesMatrix.length - 1 &&\n          lines.push(this.getLine(tile.row + 1, tile.column, false));\n        tileIndex === row.length - 1 &&\n          lines.push(this.getLine(tile.row, tile.column + 1, true));\n      });\n    });\n\n    return lines;\n  }\n\n  renderRectangles() {\n    const { tilesMatrix, config } = this.state;\n    const rectangles = [];\n\n    tilesMatrix.forEach((row) => {\n      return row.forEach((tile) => {\n        const coordinates = this.getCoordinates(tile.row, tile.column, false);\n\n        const xPadding = coordinates.xLength / 12;\n        const yPadding = coordinates.xLength / 12;\n\n        const key = `rect-${tile.row}-${tile.column}`;\n        rectangles.push(\n          <Rect\n            id={key}\n            key={key}\n            x={coordinates.x1 + xPadding}\n            y={coordinates.y1 + yPadding}\n            width={coordinates.xLength - xPadding * 2}\n            height={coordinates.yLength - yPadding * 2}\n            tile={tile}\n            config={config}\n          />\n        );\n      });\n    });\n\n    return rectangles;\n  }\n\n  render() {\n    const { tilesMatrix, playerNum } = this.state;\n    const { width, height, colors } = this.state.config;\n\n    const scores = tilesMatrix.reduce(\n      (accumulator, row) => {\n        row.forEach((tile) => {\n          if (tile.occupiedBy) {\n            accumulator[tile.occupiedBy] += 1;\n          }\n        });\n        return accumulator;\n      },\n      { 1: 0, 2: 0 }\n    );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <span style={{ fontSize: 64, color: colors.players[1] }}>\n              {scores[1]}\n            </span>\n            <span style={{ fontSize: 64 }}>&nbsp;:&nbsp;</span>\n            <span style={{ fontSize: 64, color: colors.players[2] }}>\n              {scores[2]}\n            </span>\n          </div>\n          <div\n            style={{\n              width: 256,\n              height: 32,\n              backgroundColor: colors.players[playerNum],\n            }}\n          />\n          <button className=\"Button\" onClick={this.init}>\n            Reset\n          </button>\n        </header>\n        <div className=\"App-content\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox={`0 0 ${width} ${height}`}\n          >\n            {this.renderLines()}\n            {this.renderRectangles()}\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}