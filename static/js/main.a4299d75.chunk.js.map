{"version":3,"sources":["components/Line.js","components/Rect.js","App.js","index.js"],"names":["Line","props","id","x1","y1","x2","y2","occupiedLinesMap","onClick","config","useState","isHovered","setIsHovered","lineStyles","stroke","strokeWidth","occupied","colors","players","occupiedBy","style","strokeOpacity","cursor","undefined","onMouseEnter","onMouseLeave","VERTICAL","HORIZONTAL","Rect","x","y","width","height","tile","fill","opacity","App","state","rows","columns","offset","1","2","playerNum","tilesMatrix","init","push","row","column","count","setState","Math","random","handleLineClick","event","currentTarget","updatedTilesMap","extraTurn","getAdjacentTiles","forEach","key","newTile","getUpdatedTilesMatrix","getNextPlayerNum","this","split","orientation","parseInt","tiles","length","map","vertical","xLength","yLength","coordinates","getCoordinates","lineKey","getLineKey","lines","rowIndex","tileIndex","getLine","rectangles","xPadding","yPadding","scores","reduce","accumulator","className","fontSize","color","backgroundColor","xmlns","viewBox","renderLines","renderRectangles","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4299d75.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Line(props) {\r\n  const { id, x1, y1, x2, y2, occupiedLinesMap, onClick, config } = props;\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const color = isHovered ? '#FAFAFA' : '#9E9E9E';\r\n  const lineStyles = { stroke: color, strokeWidth: 4 };\r\n  const occupied = occupiedLinesMap[id];\r\n\r\n  if (occupied != null) {\r\n    lineStyles.stroke = config.colors.players[occupied.occupiedBy];\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <line\r\n        id={`display-${id}`}\r\n        x1={x1}\r\n        y1={y1}\r\n        x2={x2}\r\n        y2={y2}\r\n        style={lineStyles}\r\n      />\r\n      <line\r\n        id={id}\r\n        x1={x1}\r\n        y1={y1}\r\n        x2={x2}\r\n        y2={y2}\r\n        style={{\r\n          ...lineStyles,\r\n          strokeWidth: lineStyles.strokeWidth * 6,\r\n          strokeOpacity: 0,\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={!occupied ? onClick : undefined}\r\n        onMouseEnter={() => setIsHovered(true)}\r\n        onMouseLeave={() => setIsHovered(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nLine.VERTICAL = 'vertical';\r\nLine.HORIZONTAL = 'horizontal';\r\n\r\nexport default Line;\r\n","import React from 'react';\r\n\r\nfunction Rect(props) {\r\n  const { id, x, y, width, height, tile, config } = props;\r\n\r\n  const style = {\r\n    strokeWidth: 1,\r\n    stroke: '#000000',\r\n    fill: '#000000',\r\n    opacity: 0,\r\n  };\r\n\r\n  if (tile.occupiedBy) {\r\n    style.stroke = config.colors.players[tile.occupiedBy];\r\n    style.fill = config.colors.players[tile.occupiedBy];\r\n    style.opacity = 1;\r\n  }\r\n\r\n  return (\r\n    <rect id={id} width={width} height={height} x={x} y={y} style={style} />\r\n  );\r\n}\r\n\r\nexport default Rect;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Line from './components/Line';\r\nimport Rect from './components/Rect';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    config: {\r\n      width: 800,\r\n      height: 800,\r\n      rows: 5,\r\n      columns: 5,\r\n      offset: 6,\r\n      colors: {\r\n        players: {\r\n          1: '#61dafb',\r\n          2: '#B2FF59',\r\n        },\r\n      },\r\n    },\r\n    playerNum: 1,\r\n    occupiedLinesMap: {},\r\n    tilesMatrix: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.init();\r\n  }\r\n\r\n  init = () => {\r\n    const { config } = this.state;\r\n\r\n    const tilesMatrix = [];\r\n\r\n    for (let y = 0; y < config.rows; y++) {\r\n      tilesMatrix.push([]);\r\n      for (let x = 0; x < config.columns; x++) {\r\n        tilesMatrix[y].push({ row: y, column: x, count: 0, occupiedBy: null });\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      tilesMatrix,\r\n      occupiedLinesMap: {},\r\n      playerNum: Math.random() > 0.5 ? 1 : 2,\r\n    });\r\n  };\r\n\r\n  getNextPlayerNum() {\r\n    return this.state.playerNum === 1 ? 2 : 1;\r\n  }\r\n\r\n  getAdjacentTiles(tilesMatrix, id) {\r\n    let [orientation, row, column] = id.split('-');\r\n    row = parseInt(row, 10);\r\n    column = parseInt(column, 10);\r\n\r\n    const tiles = [];\r\n    if (orientation === Line.HORIZONTAL) {\r\n      if (row === 0) {\r\n        tiles.push(tilesMatrix[row][column]);\r\n      } else if (row === tilesMatrix.length) {\r\n        tiles.push(tilesMatrix[row - 1][column]);\r\n      } else {\r\n        tiles.push(tilesMatrix[row - 1][column]);\r\n        tiles.push(tilesMatrix[row][column]);\r\n      }\r\n    } else if (orientation === Line.VERTICAL) {\r\n      if (column === 0) {\r\n        tiles.push(tilesMatrix[row][column]);\r\n      } else if (column === tilesMatrix[0].length) {\r\n        tiles.push(tilesMatrix[row][column - 1]);\r\n      } else {\r\n        tiles.push(tilesMatrix[row][column - 1]);\r\n        tiles.push(tilesMatrix[row][column]);\r\n      }\r\n    }\r\n    return tiles;\r\n  }\r\n\r\n  getUpdatedTilesMatrix(tilesMatrix, updatedTilesMap) {\r\n    return tilesMatrix.map((row) => {\r\n      return row.map((tile) => {\r\n        const key = `${tile.row}${tile.column}`;\r\n        return updatedTilesMap[key] || tile;\r\n      });\r\n    });\r\n  }\r\n\r\n  handleLineClick = (event) => {\r\n    const { tilesMatrix, occupiedLinesMap, playerNum } = this.state;\r\n\r\n    const id = event.currentTarget.id;\r\n    const updatedTilesMap = {};\r\n    let extraTurn = false;\r\n\r\n    this.getAdjacentTiles(tilesMatrix, id).forEach((tile) => {\r\n      const key = `${tile.row}${tile.column}`;\r\n      const newTile = { ...tile };\r\n\r\n      if (newTile.count + 1 < 4) {\r\n        newTile.count++;\r\n      } else {\r\n        newTile.count++;\r\n        newTile.occupiedBy = playerNum;\r\n        extraTurn = true;\r\n      }\r\n\r\n      updatedTilesMap[key] = newTile;\r\n    });\r\n\r\n    this.setState({\r\n      occupiedLinesMap: {\r\n        ...occupiedLinesMap,\r\n        [id]: { occupiedBy: playerNum },\r\n      },\r\n      tilesMatrix: this.getUpdatedTilesMatrix(tilesMatrix, updatedTilesMap),\r\n      playerNum: extraTurn ? playerNum : this.getNextPlayerNum(),\r\n    });\r\n  };\r\n\r\n  getCoordinates(row, column, vertical) {\r\n    const { width, height, rows, columns, offset } = this.state.config;\r\n\r\n    const xLength = (width - 2 * offset) / columns;\r\n    const yLength = (height - 2 * offset) / rows;\r\n\r\n    return {\r\n      x1: column * xLength + offset,\r\n      y1: row * yLength + offset,\r\n      x2: (column + (vertical ? 0 : 1)) * xLength + offset,\r\n      y2: (row + (vertical ? 1 : 0)) * yLength + offset,\r\n      xLength: xLength,\r\n      yLength: yLength,\r\n    };\r\n  }\r\n\r\n  getLineKey(row, column, vertical) {\r\n    return `${vertical ? Line.VERTICAL : Line.HORIZONTAL}-${row}-${column}`;\r\n  }\r\n\r\n  getLine(row, column, vertical) {\r\n    const { occupiedLinesMap, config } = this.state;\r\n    const coordinates = this.getCoordinates(row, column, vertical);\r\n    const lineKey = this.getLineKey(row, column, vertical);\r\n\r\n    return (\r\n      <Line\r\n        id={lineKey}\r\n        key={lineKey}\r\n        x1={coordinates.x1}\r\n        y1={coordinates.y1}\r\n        x2={coordinates.x2}\r\n        y2={coordinates.y2}\r\n        occupiedLinesMap={occupiedLinesMap}\r\n        config={config}\r\n        onClick={this.handleLineClick}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderLines() {\r\n    const { tilesMatrix } = this.state;\r\n    const lines = [];\r\n\r\n    tilesMatrix.forEach((row, rowIndex) => {\r\n      return row.forEach((tile, tileIndex) => {\r\n        lines.push(this.getLine(tile.row, tile.column, false));\r\n        lines.push(this.getLine(tile.row, tile.column, true));\r\n\r\n        rowIndex === tilesMatrix.length - 1 &&\r\n          lines.push(this.getLine(tile.row + 1, tile.column, false));\r\n        tileIndex === row.length - 1 &&\r\n          lines.push(this.getLine(tile.row, tile.column + 1, true));\r\n      });\r\n    });\r\n\r\n    return lines;\r\n  }\r\n\r\n  renderRectangles() {\r\n    const { tilesMatrix, config } = this.state;\r\n    const rectangles = [];\r\n\r\n    tilesMatrix.forEach((row) => {\r\n      return row.forEach((tile) => {\r\n        const coordinates = this.getCoordinates(tile.row, tile.column, false);\r\n\r\n        const xPadding = coordinates.xLength / 12;\r\n        const yPadding = coordinates.xLength / 12;\r\n\r\n        const key = `rect-${tile.row}-${tile.column}`;\r\n        rectangles.push(\r\n          <Rect\r\n            id={key}\r\n            key={key}\r\n            x={coordinates.x1 + xPadding}\r\n            y={coordinates.y1 + yPadding}\r\n            width={coordinates.xLength - xPadding * 2}\r\n            height={coordinates.yLength - yPadding * 2}\r\n            tile={tile}\r\n            config={config}\r\n          />\r\n        );\r\n      });\r\n    });\r\n\r\n    return rectangles;\r\n  }\r\n\r\n  render() {\r\n    const { tilesMatrix, playerNum } = this.state;\r\n    const { width, height, colors } = this.state.config;\r\n\r\n    const scores = tilesMatrix.reduce(\r\n      (accumulator, row) => {\r\n        row.forEach((tile) => {\r\n          if (tile.occupiedBy) {\r\n            accumulator[tile.occupiedBy] += 1;\r\n          }\r\n        });\r\n        return accumulator;\r\n      },\r\n      { 1: 0, 2: 0 }\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div>\r\n            <span style={{ fontSize: 64, color: colors.players[1] }}>\r\n              {scores[1]}\r\n            </span>\r\n            <span style={{ fontSize: 64 }}>&nbsp;:&nbsp;</span>\r\n            <span style={{ fontSize: 64, color: colors.players[2] }}>\r\n              {scores[2]}\r\n            </span>\r\n          </div>\r\n          <div\r\n            style={{\r\n              width: 256,\r\n              height: 32,\r\n              backgroundColor: colors.players[playerNum],\r\n            }}\r\n          />\r\n          <button className=\"Button\" onClick={this.init}>\r\n            Reset\r\n          </button>\r\n        </header>\r\n        <div className=\"App-content\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width={width}\r\n            height={height}\r\n            viewBox={`0 0 ${width} ${height}`}\r\n          >\r\n            {this.renderLines()}\r\n            {this.renderRectangles()}\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}